{{- $proxy := .}}{{$sheetProxy := $proxy.SheetProxy -}}{{- $ctx := $sheetProxy.ProtoCtx -}}
{{- $clsName := $proxy.ClassName}}{{$fields := $proxy.GetFields -}}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by ExcelExporter
//     version 2.1
//     from https://github.com/xuzhuoxi/ExcelExporter 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package {{$proxy.Namespace}}

import (
    "encoding/binary"
	"fmt"
    "github.com/xuzhuoxi/infra-go/binaryx"
    "io"
)

// @auth {AUTHOR} {NowTimeStr}

// I{{$clsName}}
// @description {{$proxy.ClassRemark}}
type I{{$clsName}} interface {
    // StructId 结构Id
    StructId() {{$proxy.ProtoIdDataType}}
    {{- range $index, $value := $fields}}
	// Get{{ToUpperCamelCase $value.Name}}
    // @remark {{$value.Remark}}
    // @return {{$value.TempLangType}}
    Get{{ToUpperCamelCase $value.Name}}() {{$value.TempLangType}}
    {{- end}}
}

// {{$clsName}}
// @description {{$proxy.ClassRemark}}
type {{$clsName}} struct {
    {{- range $index, $value := $fields}}
	  {{- if ne $value.Remark ""}}
    //  {{$value.Remark}}
	  {{- end}}
    {{ToUpperCamelCase $value.Name}} {{$value.TempLangType}}
    {{- end}}
}

// 实现 --- 

func New{{$clsName}}() interface{} {
	return &{{$clsName}}{}
}

func (o *{{$clsName}}) StructId() {{$proxy.ProtoIdDataType}} {
	return {{$proxy.ProtoId}}
}

{{- range $index, $value := $fields}}
// Get{{ToUpperCamelCase $value.Name}}
// @remark {{$value.Remark}}
// @return {{$value.TempLangType}}
func (o *{{$clsName}}) Get{{ToUpperCamelCase $value.Name}}() {{$value.TempLangType}} {
	return o.{{ToUpperCamelCase $value.Name}}
}
{{- end}}

func (o *{{$clsName}}) String() string {
	return fmt.Sprintf("{
	{{- range $index, $value := $fields }}
	{{- ToUpperCamelCase $value.Name}}=%v{{if lt (Add $index 1) (len $fields)}}, {{end}}
	{{- end -}}
	}"
    {{- range $index, $value := $fields -}}
	, o.{{ToUpperCamelCase $value.Name}}
	{{- end -}}
	)
}

func (o *{{$clsName}}) SetValues(
	{{- range $index, $value := $fields }}
	{{- ToLowerCamelCase $value.Name}} {{$value.TempLangType}}{{if lt (Add $index 1) (len $fields)}}, {{end -}}
	{{- end -}}
) {
	{{range $index, $value := $fields -}}
	o.{{ToUpperCamelCase $value.Name}}{{if lt (Add $index 1) (len $fields)}}, {{end -}}
	{{- end}} = {{range $index, $value := $fields -}}
	{{ToLowerCamelCase $value.Name}}{{if lt (Add $index 1) (len $fields)}}, {{end}}
	{{- end}}
}

// 以下为序列化行为 --------------

// Binary ---

func (o *{{$clsName}}) EncodeToWriter(w io.Writer) {
    Encode{{$clsName}}ToWriter(o, w)
}

func (o *{{$clsName}}) DecodeFromReader(r io.Reader) {
    Decode{{$clsName}}FromReader(o, r)
}

func Encode{{$clsName}}ToWriter(o *{{$clsName}}, w io.Writer) {
    {{- range $index, $value := $fields}}
      {{- if $value.IsCustomType}}
        {{- if $value.IsArrayType}}
    Encode{{$value.LangType}}ArrayToWriter(o.{{ToUpperCamelCase $value.Name}}, w)
        {{- else}}
    Encode{{$value.LangType}}ToWriter(o.{{ToUpperCamelCase $value.Name}}, w)
        {{- end}}
      {{- else}}{{$define := $value.LangTypeDefine}}
    binaryx.{{$define.GetSetOperate "bin"}}(w, binary.LittleEndian, o.{{ToUpperCamelCase $value.Name}})
      {{- end}}
    {{- end}}
}

func Encode{{$clsName}}ArrayToWriter(arr []{{$clsName}}, w io.Writer) {
    binaryx.WriteLen(w, binary.LittleEndian, len(arr))
    for idx := range arr {
        Encode{{$clsName}}ToWriter(&arr[idx], w)
    }
}

func Decode{{$clsName}}FromReader(o *{{$clsName}}, r io.Reader) {
    {{- range $index, $value := $fields}}
      {{- if $value.IsCustomType}}
        {{- if $value.IsArrayType}}
    o.{{ToUpperCamelCase $value.Name}} = New{{ToUpperCamelCase $value.LangType}}ArrayFromBinaryReader(r)
        {{- else}}
    o.{{ToUpperCamelCase $value.Name}} = New{{ToUpperCamelCase $value.LangType}}FromBinaryReader(r)
        {{- end}}
      {{- else}}{{$define := $value.LangTypeDefine}}
    o.{{ToUpperCamelCase $value.Name}}, _ = binaryx.{{$define.GetGetOperate "bin"}}(r, binary.LittleEndian)
      {{- end}}
    {{- end}}
}

func Decode{{$clsName}}ArrayFromReader(r io.Reader) []{{$clsName}} {
    return New{{$clsName}}ArrayFromBinaryReader(r)
}

func New{{$clsName}}FromBinaryReader(r io.Reader) *{{$clsName}} {
    rs := &{{$clsName}}{}
    rs.DecodeFromReader(r)
    return rs
}

func New{{$clsName}}ArrayFromBinaryReader(r io.Reader) []{{$clsName}} {
    ln, _ := binaryx.ReadLen(r, binary.LittleEndian)
    if ln == 0 {
        return nil
    }
    rs := make([]{{$clsName}}, ln)
    for idx := range rs {
        rs[idx] = *New{{$clsName}}FromBinaryReader(r)
    }
    return rs
}

// Binary2 ---

/*
func (o *{{$clsName}}) FromBinaryOverride(proxy IBinaryReaderProxy) {
    {{- range $index, $value := $fields}}
      {{- if $value.IsCustomType}}
        {{- if $value.IsArrayType}}
      o.{{ToUpperCamelCase $value.Name}} = New{{ToUpperCamelCase $value.LangType}}ArrayFromBinary(proxy)
        {{- else}}
      o.{{ToUpperCamelCase $value.Name}} = New{{ToUpperCamelCase $value.LangType}}FromBinary(proxy)
        {{- end}}
      {{- else}}{{$define := $value.LangTypeDefine}}
      o.{{ToUpperCamelCase $value.Name}} = proxy.{{$define.GetGetOperate "bin"}}()
      {{- end}}
    {{- end}}
}

func New{{$clsName}}FromBinary(proxy IBinaryReaderProxy) *{{$clsName}} {
   rs := &{{$clsName}}{}
   rs.FromBinaryOverride(proxy)
   return rs
}

func New{{$clsName}}ArrayFromBinary(proxy IBinaryReaderProxy) []{{$clsName}} {
   return nil
}
*/

// Json ---

/* Json
func (o *{{$clsName}}) FromJsonOverride(proxy IJsonReaderProxy) {
    // 以下为从 Json数据代理 中解释出字段数据
    {{- range $index, $value := $fields}}
      {{- if $value.IsCustomType}}
        {{- if $value.IsArrayType}}
    o.{{ToUpperCamelCase $value.Name}} = New{{ToUpperCamelCase $value.LangType}}ArrayFromJson(proxy.GetString("{{$value.Name}}"))
        {{- else}}
    o.{{ToUpperCamelCase $value.Name}} = New{{ToUpperCamelCase $value.LangType}}FromJson(proxy.GetString("{{$value.Name}}"))
        {{- end}}
      {{- else}}{{$define := $value.LangTypeDefine}}
    o.{{ToUpperCamelCase $value.Name}} = proxy.{{$define.GetGetOperate "json"}}("{{$value.Name}}")
      {{- end}}
    {{- end}}
}

func New{{$clsName}}FromJson(data string) *{{$clsName}} {
    rs := &{{$clsName}}{}
    rs.FromJsonOverride(data)
    return rs
}

func New{{$clsName}}ArrayFromJson(data string) []{{$clsName}} {
    return nil
}
*/

// Yaml ---

/*
func (o *{{$clsName}}) FromYamlOverride(proxy IYamlReaderProxy) {
	// 以下为从 Yaml数据代理 中解释出字段数据
    {{- range $index, $value := $fields}}
      {{- if $value.IsCustomType}}
        {{- if $value.IsArrayType}}
    o.{{ToUpperCamelCase $value.Name}} = New{{ToUpperCamelCase $value.LangType}}ArrayFromYaml(proxy.GetString("{{$value.Name}}"))
        {{- else}}
    o.{{ToUpperCamelCase $value.Name}} = New{{ToUpperCamelCase $value.LangType}}FromYaml(proxy.GetString("{{$value.Name}}"))
        {{- end}}
      {{- else}}{{$define := $value.LangTypeDefine}}
    o.{{ToUpperCamelCase $value.Name}} = proxy.{{$define.GetGetOperate "yaml"}}("{{$value.Name}}")
      {{- end}}
    {{- end}}
}

func New{{$clsName}}FromYaml(data string) *{{$clsName}} {
    rs := &{{$clsName}}{}
    rs.FromYamlOverride(data)
    return rs
}

func New{{$clsName}}ArrayFromYaml(data string) []{{$clsName}} {
    return nil
}
*/