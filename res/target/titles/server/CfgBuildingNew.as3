package {MODULE}{
    import xu.BinaryReaderProxy;

    /**
     * @author {AUTHOR}
     * Created on {DATE}.
     */
     public class CfgBuildingNew {
        // 以下为属性声明

        // ID
        private var _buildingType: uint;
        // 建筑
        private var _name: String;
        // 规格
        private var _layoutX: uint;
        // 门X坐标
        private var _gateX: Number;
        // 门Y坐标
        private var _gateY: Number;
        // 地形
        private var _terrainFlags: int;
        // 供需人口类型
        private var _supplyPopulationType: int;
        // 有没有门
        private var _isDoor: int;
        // 建筑描述
        private var _desc1: String;
        // 建筑描述
        private var _desc2: String;
        // 建筑描述
        private var _desc3: String;
        // 测试1
        private var _f1: Vector.<Boolean>;
        // 测试2
        private var _f2: Vector.<uint>;
        // 测试3
        private var _f3: Vector.<uint>;
        // 测试4
        private var _f4: Vector.<uint>;
        // 测试5
        private var _f5: Vector.<int>;
        // 测试6
        private var _f6: Vector.<int>;
        // 测试7
        private var _f7: Vector.<int>;
        // 测试8
        private var _f8: Vector.<Number>;
        // 测试9
        private var _f9: Vector.<String>;
        // 测试10
        private var _f10: Vector.<String>;

        // 以下为Get方法

	    /**
	     * ID
	     *
	     * @remark 注释列
	     * @return uint
	     */
	    public function get buildingType(): uint {
	        return this._buildingType;
	    }

	    /**
	     * 建筑
	     *
	     * @remark 建筑名称
	     * @return String
	     */
	    public function get name(): String {
	        return this._name;
	    }

	    /**
	     * 规格
	     *
	     * @remark 
	     * @return uint
	     */
	    public function get layoutX(): uint {
	        return this._layoutX;
	    }

	    /**
	     * 门X坐标
	     *
	     * @remark 坐标从0开始
	     * @return Number
	     */
	    public function get gateX(): Number {
	        return this._gateX;
	    }

	    /**
	     * 门Y坐标
	     *
	     * @remark 
	     * @return Number
	     */
	    public function get gateY(): Number {
	        return this._gateY;
	    }

	    /**
	     * 地形
	     *
	     * @remark 4
	     * @return int
	     */
	    public function get terrainFlags(): int {
	        return this._terrainFlags;
	    }

	    /**
	     * 供需人口类型
	     *
	     * @remark 平民 1 -> 修改为 233
骑士 2 -> 修改为 234
贵族 3 -> 修改为 235

	     * @return int
	     */
	    public function get supplyPopulationType(): int {
	        return this._supplyPopulationType;
	    }

	    /**
	     * 有没有门
	     *
	     * @remark 5
	     * @return int
	     */
	    public function get isDoor(): int {
	        return this._isDoor;
	    }

	    /**
	     * 建筑描述
	     *
	     * @remark 建筑描述
string(20)
	     * @return String
	     */
	    public function get desc1(): String {
	        return this._desc1;
	    }

	    /**
	     * 建筑描述
	     *
	     * @remark 建筑描述
string
	     * @return String
	     */
	    public function get desc2(): String {
	        return this._desc2;
	    }

	    /**
	     * 建筑描述
	     *
	     * @remark 建筑描述
json
	     * @return String
	     */
	    public function get desc3(): String {
	        return this._desc3;
	    }

	    /**
	     * 测试1
	     *
	     * @remark 测试1
	     * @return Vector.<Boolean>
	     */
	    public function get f1(): Vector.<Boolean> {
	        return this._f1;
	    }

	    /**
	     * 测试2
	     *
	     * @remark 测试2
	     * @return Vector.<uint>
	     */
	    public function get f2(): Vector.<uint> {
	        return this._f2;
	    }

	    /**
	     * 测试3
	     *
	     * @remark 测试3
	     * @return Vector.<uint>
	     */
	    public function get f3(): Vector.<uint> {
	        return this._f3;
	    }

	    /**
	     * 测试4
	     *
	     * @remark 测试4
	     * @return Vector.<uint>
	     */
	    public function get f4(): Vector.<uint> {
	        return this._f4;
	    }

	    /**
	     * 测试5
	     *
	     * @remark 测试5
	     * @return Vector.<int>
	     */
	    public function get f5(): Vector.<int> {
	        return this._f5;
	    }

	    /**
	     * 测试6
	     *
	     * @remark 测试6
	     * @return Vector.<int>
	     */
	    public function get f6(): Vector.<int> {
	        return this._f6;
	    }

	    /**
	     * 测试7
	     *
	     * @remark 测试7
	     * @return Vector.<int>
	     */
	    public function get f7(): Vector.<int> {
	        return this._f7;
	    }

	    /**
	     * 测试8
	     *
	     * @remark 测试8
	     * @return Vector.<Number>
	     */
	    public function get f8(): Vector.<Number> {
	        return this._f8;
	    }

	    /**
	     * 测试9
	     *
	     * @remark 测试9
	     * @return Vector.<String>
	     */
	    public function get f9(): Vector.<String> {
	        return this._f9;
	    }

	    /**
	     * 测试10
	     *
	     * @remark 测试10
	     * @return Vector.<String>
	     */
	    public function get f10(): Vector.<String> {
	        return this._f10;
	    }

        // Json数据解释
        public function parseJson(data: Object): void {
            // 以下为从 Json数据代理 中解释出字段数据
            this._buildingType = uint(data.building_type_j); 
            this._name = String(data.name_j); 
            this._layoutX = uint(data.layoutX_j); 
            this._gateX = Number(data.gateX_j); 
            this._gateY = Number(data.gateY_j); 
            this._terrainFlags = int(data.terrain_flags_j); 
            this._supplyPopulationType = int(data.supply_population_type_j); 
            this._isDoor = int(data.isDoor_j); 
            this._desc1 = String(data.desc1_j); 
            this._desc2 = String(data.desc2_j); 
            this._desc3 = String(data.desc3_j); 
            this._f1 = Vector.<Boolean>(data.f1_j); 
            this._f2 = Vector.<uint>(data.f2_j); 
            this._f3 = Vector.<uint>(data.f3_j); 
            this._f4 = Vector.<uint>(data.f4_j); 
            this._f5 = Vector.<int>(data.f5_j); 
            this._f6 = Vector.<int>(data.f6_j); 
            this._f7 = Vector.<int>(data.f7_j); 
            this._f8 = Vector.<Number>(data.f8_j); 
            this._f9 = Vector.<String>(data.f9_j); 
            this._f10 = Vector.<String>(data.f10_j); 
        }

        // 二进制数据解释
        public function parseBinary(proxy: BinaryReaderProxy): void {
            // 以下为从 二进制数据代理 中解释出字段数据
            this._buildingType = uint(data.readUInt16()); 
            this._name = String(data.readString()); 
            this._layoutX = uint(data.readUInt16()); 
            this._gateX = Number(data.readFloat32()); 
            this._gateY = Number(data.readFloat32()); 
            this._terrainFlags = int(data.readInt32()); 
            this._supplyPopulationType = int(data.readInt16()); 
            this._isDoor = int(data.readInt8()); 
            this._desc1 = String(data.readString()); 
            this._desc2 = String(data.readString()); 
            this._desc3 = String(data.readString()); 
            this._f1 = Vector.<Boolean>(data.readBooleanArray()); 
            this._f2 = Vector.<uint>(data.readUInt8Array()); 
            this._f3 = Vector.<uint>(data.readUInt16Array()); 
            this._f4 = Vector.<uint>(data.readUInt32Array()); 
            this._f5 = Vector.<int>(data.readInt8Array()); 
            this._f6 = Vector.<int>(data.readInt16Array()); 
            this._f7 = Vector.<int>(data.readInt32Array()); 
            this._f8 = Vector.<Number>(data.readFloat32Array()); 
            this._f9 = Vector.<String>(data.readStringArray()); 
            this._f10 = Vector.<String>(data.readStringArray()); 
        }
     }
}